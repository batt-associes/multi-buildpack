#!/usr/bin/env bash

set -e

[ "$BUILDPACK_DEBUG" = "true" ] && set -x

# Set MULTI_BUILDPACK_VERBOSE to 1 for alternate logging more verbose
VERBOSE=${MULTI_BUILDPACK_VERBOSE:-0}
# Pretty print functions used for VERBOSE=1
BIN_DIR=$(cd "$(dirname "$0")"; pwd) # absolute path
source "$BIN_DIR/util/printing"

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

for BUILDPACK in $(cat $1/.buildpacks); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  # Remove additional \r if file created with Windows
  url=$(echo $url | tr -d '\r')
  branch=$(echo $branch | tr -d '\r')

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    [ "$VERBOSE" -eq 1 ] && block_print "Buildpack: $BUILDPACK"
    [ "$VERBOSE" -eq 1 ] && pretty_start "yellow" "dim"
    echo "=====> Downloading Buildpack: $url"
    [ "$VERBOSE" -eq 1 ] && pretty_end

    if [[ "$url" =~ \.tgz$ || "$url" =~ \.tar\.gz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
      if [ -f "$dir/.gitmodules" ]; then
        [ "$VERBOSE" -eq 1 ] && pretty_start "yellow" "dim"
        echo "=====> Detected git submodules. Initializing..."
        [ "$VERBOSE" -eq 1 ] && pretty_end
        (cd $dir && git submodule update --init --recursive)
      fi

      if [ "$branch" != "" ]; then
        [ "$VERBOSE" -eq 1 ] && pretty_start "yellow" "dim"
        echo "=====> Using branch: $branch"
        [ "$VERBOSE" -eq 1 ] && pretty_end
        (cd $dir && git checkout $branch >/dev/null 2>&1)
      fi
    fi
    cd $dir

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect $1)

    if [ $? == 0 ]; then
      [ "$VERBOSE" -eq 1 ] && pretty_start "magenta" "bold"
      echo "=====> Detected Framework: $framework"
      [ "$VERBOSE" -eq 1 ] && pretty_end
      $dir/bin/compile $1 $2 $3

      if [ $? != 0 ]; then
        exit 1
      fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        source $dir/export
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $1 > $1/last_pack_release.out
      fi
      [ "$VERBOSE" -eq 1 ] && title_print "End: $framework" "~"
      [ "$VERBOSE" -eq 1 ] && printf "\n"
    else
      echo " !     Application is not compatible with the buildpack."
      echo "       Check buildpack documentation for more information:"
      echo "       https://doc.scalingo.com/platform/deployment/buildpacks/intro"
    fi
  fi
done

if [ -e $1/last_pack_release.out ]; then
  echo "Using release configuration from last framework ($framework)."
fi

